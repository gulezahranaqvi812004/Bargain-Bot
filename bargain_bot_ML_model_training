import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
def train_budget_model(historical_data):
    print('Historical Data')
    print(historical_data)
    
    # Features and target variable
    features = historical_data[['duration', 'resources', 'expertise']]
    target = historical_data['budget']
    
    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
    
    # Initialize models
    models = {
        'Linear Regression': LinearRegression(),
        'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
        # 'Decision Tree': DecisionTreeRegressor(random_state=42),
        # 'SVR': SVR(),
        # 'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, random_state=42)
    }

    best_model = None
    best_rmse = float('inf')
    
    for model_name, model in models.items():
        # Train the model
        model.fit(X_train, y_train)
        
        # Evaluate the model on the test data
        predictions = model.predict(X_test)
        
        # Calculate Mean Squared Error and RMSE
        mse = mean_squared_error(y_test, predictions)
        rmse = np.sqrt(mse)
        
        print(f"{model_name} - Mean Squared Error: {mse:.2f}")
        print(f"{model_name} - Root Mean Squared Error: {rmse:.2f}")
        
        # Keep track of the best model
        if rmse < best_rmse:
            best_rmse = rmse
            best_model = model

        # Plot the results
        # plt.figure(figsize=(8, 6))
        # plt.scatter(y_test, predictions, alpha=0.7, label=f'{model_name} - Predicted vs Actual')
        # plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r', linewidth=2, label='Ideal Fit')
        # plt.title(f'Model Fit: {model_name} - Actual vs Predicted Budgets (Test Data)')
        # plt.xlabel('Actual Budgets')
        # plt.ylabel('Predicted Budgets')
        # plt.legend()
        # plt.grid()
        # plt.show()
        
        # Prepare data for polynomial fit
        x_vals = np.arange(len(y_test))  # X-axis: indices of the test data points

        # Polynomial fit for actual values
        poly = PolynomialFeatures(degree=3)  # You can change the degree (e.g., 3 for cubic)
        x_poly = poly.fit_transform(x_vals.reshape(-1, 1))

        # Fit a polynomial regression model to actual and predicted values
        model_actual = LinearRegression().fit(x_poly, y_test)
        model_predicted = LinearRegression().fit(x_poly, predictions)

        # Generate smooth curve for actual and predicted values
        y_actual_curve = model_actual.predict(x_poly)
        y_predicted_curve = model_predicted.predict(x_poly)

        # Plotting
        plt.figure(figsize=(8, 6))

        # Plot the actual and predicted curves
        plt.plot(x_vals, y_actual_curve, label='Actual Budgets (Polynomial Fit)', color='blue', linewidth=2)
        plt.plot(x_vals, y_predicted_curve, label='Predicted Budgets (Polynomial Fit)', color='orange', linestyle='--', linewidth=2)

        # Add labels and title
        plt.title(f'Model Fit: {model_name} - Actual vs Predicted Budgets (Non-Linear Fit)')
        plt.xlabel('Test Data Index')
        plt.ylabel('Budget')

        # Add legend and grid
        plt.legend()
        plt.grid(True)

        # Show plot
        plt.show()
    
    print(f"\nBest Model: {best_model} with RMSE: {best_rmse:.2f}")
    return best_model

# Data Generation
def generate_historical_data(num_samples):
    durations = np.random.randint(1, 20, num_samples)
    resources = np.random.randint(1, 20, num_samples)
    expertise = np.random.randint(1, 20, num_samples)
    
    # Define variables for constants
    duration_factor = 1.5
    duration_scale = 50
    resource_scale = 150
    expertise_scale = 300
    
    # Include nonlinear effects and noise
    noise = np.random.normal(0, 100, num_samples)
    budgets = (durations ** duration_factor * duration_scale) + (resources * resource_scale) + (np.log1p(expertise) * expertise_scale) + noise  
    
    historical_data = pd.DataFrame({
        'duration': durations,
        'resources': resources,
        'expertise': expertise,
        'budget': budgets
    })
    return historical_data

# Predict using ML Model
def forecast_budget_with_model(model, project_details):
    features = np.array([project_details['duration'], project_details['resources'], project_details['expertise']]).reshape(1, -1)
    estimated_budget = model.predict(features)[0]
    return estimated_budget

# Suggest price based on complexity score and estimated budget
def suggest_price(complexity_score, estimated_budget):
    weights = np.array([0.4, 0.6])  
    inputs = np.array([complexity_score, estimated_budget])
    return np.dot(weights, inputs)

# Adjust price based on feedback
def adjust_price(current_price, feedback):
    adjustment = {'positive': 0.95, 'negative': 1.1, 'neutral': 1.0}
    return current_price * adjustment.get(feedback, 1.0)

# Chatbot with ML Integration
def chatbot_with_ml():
    print("Welcome to BargainBot!")
    historical_data = generate_historical_data(num_samples=1000)
    model = train_budget_model(historical_data)

    # while True:
    #     print("\nOptions:")
    #     print("1. Ask about project types (FR-1)")
    #     print("2. Calculate complexity score (FR-2)")
    #     print("3. Estimate budget with ML (FR-3)")
    #     print("4. Get a price suggestion (FR-4)")
    #     print("5. Adjust price based on feedback (FR-5)")
    #     print("6. Exit")

    #     choice = input("Enter your choice: ")

    #     if choice == "1":
    #         message = input("Enter your project query: ")
    #         response = "We can help with your query!"  # Placeholder response
    #         print(f"BargainBot: {response}")

    #     elif choice == "2":
    #         duration = int(input("Enter project duration (weeks): "))
    #         resources = int(input("Enter resources required (count): "))
    #         expertise = int(input("Enter expertise level (1-10): "))
    #         project_details = {"duration": duration, "resources": resources, "expertise": expertise}
    #         complexity_score = (duration * 2) + (resources * 3) + (expertise * 5)  # Example calculation
    #         print(f"BargainBot: Complexity Score is {complexity_score}")

    #     elif choice == "3":
    #         duration = int(input("Enter project duration (weeks): "))
    #         resources = int(input("Enter resources required (count): "))
    #         expertise = int(input("Enter expertise level (1-10): "))
    #         project_details = {"duration": duration, "resources": resources, "expertise": expertise}
    #         budget = forecast_budget_with_model(model, project_details)
    #         print(f"BargainBot: Estimated Budget is {budget}")

    #     elif choice == "4":
    #         complexity_score = float(input("Enter the complexity score: "))
    #         estimated_budget = float(input("Enter the estimated budget: "))
    #         price = suggest_price(complexity_score, estimated_budget)
    #         print(f"BargainBot: Suggested Price is {price}")

    #     elif choice == "5":
    #         current_price = float(input("Enter the current price: "))
    #         feedback = input("Enter client feedback (positive/negative/neutral): ").lower()
    #         adjusted_price = adjust_price(current_price, feedback)
    #         print(f"BargainBot: Adjusted Price is {adjusted_price}")

    #     elif choice == "6":
    #         print("BargainBot: Goodbye! Have a great day! \ud83d\udc4b")
    #         break

    #     else:
    #         print("BargainBot: Invalid choice. Please try again.")

if __name__ == "__main__":
    chatbot_with_ml()
